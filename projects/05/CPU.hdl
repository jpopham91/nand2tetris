// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* for instruction type A, set A register
	// for instruction type C
	instruction[0..2] = jump control bits
		0 0 0 = null
		0 0 1 = JGT
		0 1 0 = JEQ
		0 1 1 = JGE
		1 0 0 = JLT
		1 0 1 = JNE
		1 1 0 = JLE
		1 1 1 = JMP
	instruction[3..5] = dest control bits
		instruction[3] = M (RAM[A])
		instruction[4] = D (register D)
		instruction[5] = A (register A)
	instruction[6..11] = ALU control bits
    instruction[12] = compare D vs A else M */

	/* instruction type */
	Not(in=instruction[15], out=typeA);

	/* Register A */
	Mux16(a=ALUout, b=instruction, sel=typeA, out=Ain);
	Or(a=typeA, b=instruction[5] /*destA*/, out=loadA);
	ARegister(in=Ain, load=loadA, out=A, out[0..14]=addressM);

	/* Register D */
	And(a=instruction[15], b=instruction[4] /*destD*/, out=loadD);
	DRegister(in=ALUout, load=loadD, out=D);

	/* Load M */
	And(a=instruction[15], b=instruction[3] /*destM*/, out=writeM);

	/* ALU */
	Mux16(a=A, b=inM, sel=instruction[12] /*A?*/, out=AorM);
    ALU(x=D, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=eq, ng=lt);

	/* Jump */
	Or(a=lt, b=eq, out=lte);
	Not(in=lte, out=gt);

	And(a=instruction[0], b=gt, out=j3);
	And(a=instruction[1], b=eq, out=j2);
	And(a=instruction[2], b=lt, out=j1);

	Or(a=j1, b=j2, out=j12);
	Or(a=j12, b=j3, out=j123);

	And(a=j123, b=instruction[15], out=jump);

	PC(in=A, load=jump, inc=true, reset=reset, out[0..14]=pc);

}
